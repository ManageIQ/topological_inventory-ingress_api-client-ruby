=begin
#Topological Inventory Ingress API

#Topological Inventory Ingress API

The version of the OpenAPI document: 0.0.2
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'date'

module TopologicalInventoryIngressApiClient
  class Inventory
    attr_accessor :name

    attr_accessor :schema

    attr_accessor :source

    attr_accessor :source_type

    attr_accessor :refresh_state_uuid

    attr_accessor :refresh_state_part_uuid

    attr_accessor :total_parts

    attr_accessor :sweep_scope

    attr_accessor :collections

    attr_accessor :refresh_state_part_collected_at

    attr_accessor :refresh_state_part_sent_at

    attr_accessor :refresh_state_started_at

    attr_accessor :refresh_state_sent_at

    attr_accessor :ingress_api_sent_at

    attr_accessor :refresh_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name'                            => :'name',
        :'schema'                          => :'schema',
        :'source'                          => :'source',
        :'source_type'                     => :'source_type',
        :'refresh_state_uuid'              => :'refresh_state_uuid',
        :'refresh_state_part_uuid'         => :'refresh_state_part_uuid',
        :'total_parts'                     => :'total_parts',
        :'sweep_scope'                     => :'sweep_scope',
        :'collections'                     => :'collections',
        :'refresh_state_part_collected_at' => :'refresh_state_part_collected_at',
        :'refresh_state_part_sent_at'      => :'refresh_state_part_sent_at',
        :'refresh_state_started_at'        => 'refresh_state_started_at',
        :'refresh_state_sent_at'           => 'refresh_state_sent_at',
        :'ingress_api_sent_at'             => :'ingress_api_sent_at',
        :'refresh_type'                    => :'refresh_type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name'                            => :'String',
        :'schema'                          => :'Schema',
        :'source'                          => :'String',
        :'source_type'                     => :'String',
        :'refresh_state_uuid'              => :'String',
        :'refresh_state_part_uuid'         => :'String',
        :'total_parts'                     => :'Integer',
        :'sweep_scope'                     => :'Array<String>',
        :'collections'                     => :'Array<InventoryCollection>',
        :'refresh_state_part_collected_at' => :'DateTime',
        :'refresh_state_part_sent_at'      => :'DateTime',
        :'refresh_state_started_at'        => :'DateTime',
        :'refresh_state_sent_at'           => :'DateTime',
        :'ingress_api_sent_at'             => :'DateTime',
        :'refresh_type'                    => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TopologicalInventoryIngressApiClient::Inventory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TopologicalInventoryIngressApiClient::Inventory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'source_type')
        self.source_type = attributes[:'source_type']
      end

      if attributes.key?(:'refresh_state_uuid')
        self.refresh_state_uuid = attributes[:'refresh_state_uuid']
      end

      if attributes.key?(:'refresh_state_part_uuid')
        self.refresh_state_part_uuid = attributes[:'refresh_state_part_uuid']
      end

      if attributes.key?(:'total_parts')
        self.total_parts = attributes[:'total_parts']
      end

      if attributes.key?(:'sweep_scope')
        self.sweep_scope = attributes[:'sweep_scope']
      end

      if attributes.key?(:'collections')
        if (value = attributes[:'collections']).is_a?(Array)
          self.collections = value
        end
      end

      if attributes.key?(:'refresh_state_part_collected_at')
        self.refresh_state_part_collected_at = attributes[:'refresh_state_part_collected_at']
      end

      if attributes.key?(:'refresh_state_part_sent_at')
        self.refresh_state_part_sent_at = attributes[:'refresh_state_part_sent_at']
      end

      if attributes.key?(:'refresh_state_started_at')
        self.refresh_state_started_at = attributes[:'refresh_state_started_at']
      end

      if attributes.key?(:'refresh_state_sent_at')
        self.refresh_state_sent_at = attributes[:'refresh_state_sent_at']
      end

      if attributes.key?(:'ingress_api_sent_at')
        self.ingress_api_sent_at = attributes[:'ingress_api_sent_at']
      end

      if attributes.key?(:'refresh_type')
        self.refresh_type = attributes[:'refresh_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @schema.nil?
        invalid_properties.push('invalid value for "schema", schema cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @schema.nil?
      return false if @source.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          schema == o.schema &&
          source == o.source &&
          source_type == o.source_type &&
          refresh_state_uuid == o.refresh_state_uuid &&
          refresh_state_part_uuid == o.refresh_state_part_uuid &&
          total_parts == o.total_parts &&
          sweep_scope == o.sweep_scope &&
          collections == o.collections &&
          refresh_state_part_collected_at == o.refresh_state_part_collected_at &&
          refresh_state_part_sent_at == o.refresh_state_part_sent_at &&
          refresh_state_started_at == o.refresh_state_started_at &&
          refresh_state_sent_at == o.refresh_state_sent_at &&
          ingress_api_sent_at == o.ingress_api_sent_at &&
          refresh_type == o.refresh_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, schema, source, source_type, refresh_state_uuid, refresh_state_part_uuid, total_parts, sweep_scope, collections,
       refresh_state_part_collected_at, refresh_state_part_sent_at, refresh_state_started_at, refresh_state_sent_at, ingress_api_sent_at,
       refresh_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TopologicalInventoryIngressApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
